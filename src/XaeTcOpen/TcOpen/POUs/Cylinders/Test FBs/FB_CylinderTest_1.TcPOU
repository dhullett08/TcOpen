<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.5">
  <POU Name="FB_CylinderTest_1" Id="{451ed99b-0fe8-4a64-bd4b-a1ecbfea7c96}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_CylinderTest_1 EXTENDS FB_TestSuite
VAR
	fbCylinder : FB_Cylinder;
	
	masterMoveState, prevState : (
		init,
		runMoveToHomeTest,
		runPauseState,
		runMoveToWorkTest,
		cycleComplete,
		errorCycle
	);
	
	moveHomeTestState : (
		initToHome,
		requestCylinderMoveToHome,
		seeMovingToHomeStatus,
		waitForCylinderAtHome,
		completeToHome
	);
	moveToWorkTestState : (
		initToWork,
		requestCylinderMoveToWork,
		seeMovingToWorkStatus,
		waitForCylinderAtWork,
		completeToWork
	);
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[CycleCylinder();]]></ST>
    </Implementation>
    <Method Name="CycleCylinder" Id="{898b9e15-117c-4e6f-a9af-aa6905ddff6a}">
      <Declaration><![CDATA[METHOD CycleCylinder : int
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CycleCylinder');
CASE masterMoveState OF
	
	init:

		prevState := masterMoveState;
		masterMoveState := runMoveToHomeTest;
		
	runMoveToHomeTest :

		prevState := masterMoveState;
		IF MoveCylinderToHome() THEN
			masterMoveState := runPauseState;
		END_IF
		
	runPauseState:
		prevState := masterMoveState;
		masterMoveState := runMoveToWorkTest;
		
	runMoveToWorkTest :
	
		prevState := masterMoveState;
		IF MoveCylinderToWork() THEN
			masterMoveState := cycleComplete;
			
		END_IF
		
	cycleComplete :
		IF prevState <> masterMoveState THEN
			TEST_FINISHED_NAMED('CycleCylinder');
			prevState := masterMoveState;
		END_IF
		
END_CASE

]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoveCylinderToHome" Id="{041189c3-f130-4154-92de-08f61601da7d}">
      <Declaration><![CDATA[METHOD MoveCylinderToHome : BOOL
VAR_INST
	timeoutTimer : TON := (PT := fbCylinder.CYLINDER_MOVE_TIME + fbCylinder.CYLINDER_MOVE_TIME ); // allow twice the required time
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
CASE moveHomeTestState OF
	
	init:
		TEST('MoveCylinderToHome');
		moveHomeTestState := requestCylinderMoveToHome;
		
	requestCylinderMoveToHome :
		fbCylinder.MoveToHome();
		
		moveHomeTestState := seeMovingToHomeStatus;
		
	seeMovingToHomeStatus :
 
		AssertTrue( fbCylinder.MovingToHomePosition, 'fbCylinder.MovingToHome was not true');
		AssertTrue( fbCylinder.toHomePos, 'fbCylinder.toHomePos was not true');
		
		IF NOT ( fbCylinder.MovingToHomePosition AND fbCylinder.toHomePos ) THEN
			moveHomeTestState := waitForCylinderAtHome;
		ELSE
			moveHomeTestState := completeToHome;
		END_IF
		
	waitForCylinderAtHome :
	
		IF timeoutTimer.Q THEN
			moveHomeTestState := completeToHome;
			AssertTrue( FALSE , 'fbCylinder timed out moving to home.' );	
	
		ELSIF fbCylinder.AtHome THEN
			AssertTrue( TRUE , '' );
			moveHomeTestState := completeToHome;
			
			
		END_IF
		
	completeToHome :
		TEST_FINISHED_NAMED('MoveCylinderToHome');
		MoveCylinderToHome := TRUE;
END_CASE

timeoutTimer( IN := fbCylinder.MovingToHomePosition );
]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoveCylinderToWork" Id="{e5dcc0de-a376-4952-a003-f33c3b0628d6}">
      <Declaration><![CDATA[METHOD MoveCylinderToWork : BOOL
VAR_INST
	timeoutTimer : TON := (PT := fbCylinder.CYLINDER_MOVE_TIME + fbCylinder.CYLINDER_MOVE_TIME ); // allow twice the required time
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
CASE moveToWorkTestState OF
	
	init:
		TEST('MoveCylinderToWork');
		moveToWorkTestState := requestCylinderMoveToWork;
		
	requestCylinderMoveToWork :
		fbCylinder.MoveToWork();
		
		moveToWorkTestState := seeMovingToWorkStatus;
		
	seeMovingToWorkStatus :
 
		AssertTrue( fbCylinder.MovingToWorkPosition, 'fbCylinder.MovingToWorkPosition was not true');
		AssertTrue( fbCylinder.toWorkPos, 'fbCylinder.toWorkPos was not true');
		
		IF NOT ( fbCylinder.MovingToHomePosition AND fbCylinder.toHomePos ) THEN
			moveToWorkTestState := waitForCylinderAtWork;
		ELSE
			moveToWorkTestState := completeToWork;
		END_IF
		
	waitForCylinderAtWork :
	
		IF timeoutTimer.Q THEN
			moveToWorkTestState := completeToWork;
			AssertTrue( FALSE , 'fbCylinder timed out moving to work.' );	
	
		ELSIF fbCylinder.AtWork THEN
			AssertTrue( TRUE , '' );
			moveToWorkTestState := completeToWork;
		
		END_IF
		
	completeToWork :
		TEST_FINISHED_NAMED('MoveCylinderToWork');
		MoveCylinderToWork := TRUE;
END_CASE

timeoutTimer( IN := fbCylinder.MovingToWorkPosition );]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_CylinderTest_1">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_CylinderTest_1.CycleCylinder">
      <LineId Id="39" Count="0" />
      <LineId Id="3" Count="13" />
      <LineId Id="35" Count="0" />
      <LineId Id="37" Count="1" />
      <LineId Id="36" Count="0" />
      <LineId Id="17" Count="9" />
      <LineId Id="40" Count="0" />
      <LineId Id="27" Count="4" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_CylinderTest_1.MoveCylinderToHome">
      <LineId Id="50" Count="0" />
      <LineId Id="3" Count="35" />
      <LineId Id="40" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="42" Count="2" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_CylinderTest_1.MoveCylinderToWork">
      <LineId Id="51" Count="0" />
      <LineId Id="3" Count="30" />
      <LineId Id="35" Count="3" />
      <LineId Id="40" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="42" Count="2" />
    </LineIds>
  </POU>
</TcPlcObject>