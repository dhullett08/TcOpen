<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.4">
  <POU Name="FB_CylinderTest" Id="{c9681de6-3801-4351-b3e3-1704c7faa79b}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_CylinderTest EXTENDS FB_TestSuite
VAR
	fbCylinder : FB_Cylinder;
	
	masterMoveState, prevState : (
		init,
		runMoveToHomeTest,
		runPauseState,
		runMoveToWorkTest,
		cycleComplete,
		errorCycle
	);
	
	moveHomeTestState : (
		initToHome,
		requestCylinderMoveToHome,
		seeMovingToHomeStatus,
		waitForCylinderAtHome,
		completeToHome
	);
	moveToWorkTestState : (
		initToWork,
		requestCylinderMoveToWork,
		seeMovingToWorkStatus,
		waitForCylinderAtWork,
		completeToWork
	);
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[CycleCylinder();
fbCylinder();]]></ST>
    </Implementation>
    <Method Name="CycleCylinder" Id="{2f755462-1437-4939-92cb-0ec93d8f7e06}">
      <Declaration><![CDATA[METHOD CycleCylinder : int
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CycleCylinder');
CASE masterMoveState OF
	
	init:

		prevState := masterMoveState;
		masterMoveState := runMoveToHomeTest;
		
	runMoveToHomeTest :

		prevState := masterMoveState;
		IF MoveCylinderToHome() THEN
			masterMoveState := runPauseState;
		END_IF
		
	runPauseState:
		prevState := masterMoveState;
		masterMoveState := runMoveToWorkTest;
		
	runMoveToWorkTest :
	
		prevState := masterMoveState;
		IF MoveCylinderToWork() THEN
			masterMoveState := cycleComplete;
			
		END_IF
		
	cycleComplete :
		IF prevState <> masterMoveState THEN
			TEST_FINISHED_NAMED('CycleCylinder');
			prevState := masterMoveState;
		END_IF
		
END_CASE

]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoveCylinderToHome" Id="{d1670a49-1575-44f3-8e2b-e20c2cb1c3ba}">
      <Declaration><![CDATA[METHOD MoveCylinderToHome : BOOL
VAR_INST
	timeoutTimer : TON := (PT := fbCylinder.CYLINDER_MOVE_TIME + fbCylinder.CYLINDER_MOVE_TIME ); // allow twice the required time
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
CASE moveHomeTestState OF
	
	initToHome:
		TEST('MoveCylinderToHome');
		moveHomeTestState := requestCylinderMoveToHome;
		
	requestCylinderMoveToHome :
		fbCylinder.MoveToHome();
		
		moveHomeTestState := seeMovingToHomeStatus;
		
	seeMovingToHomeStatus :
 
		AssertTrue( fbCylinder.MovingToHomePosition, 'fbCylinder.MovingToHome was not true');
		AssertTrue( fbCylinder.toHomePos, 'fbCylinder.toHomePos was not true');
		
		// first, catch the error
		IF NOT ( fbCylinder.MovingToHomePosition AND fbCylinder.toHomePos ) THEN
			moveHomeTestState := completeToHome;
		ELSE
			moveHomeTestState := waitForCylinderAtHome;
		END_IF
		
	waitForCylinderAtHome :
	
		IF timeoutTimer.Q THEN
			moveHomeTestState := completeToHome;
			AssertTrue( FALSE , 'fbCylinder timed out moving to home.' );	
	
		ELSIF fbCylinder.AtHome THEN
			AssertTrue( TRUE , '' );
			moveHomeTestState := completeToHome;
			
			
		END_IF
		
	completeToHome :
		TEST_FINISHED_NAMED('MoveCylinderToHome');
		MoveCylinderToHome := TRUE;
END_CASE

timeoutTimer( IN := fbCylinder.MovingToHomePosition );
]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoveCylinderToWork" Id="{ac164537-900c-4f94-aea7-aab467983538}">
      <Declaration><![CDATA[METHOD MoveCylinderToWork : BOOL
VAR_INST
	timeoutTimer : TON := (PT := fbCylinder.CYLINDER_MOVE_TIME + fbCylinder.CYLINDER_MOVE_TIME ); // allow twice the required time
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE moveToWorkTestState OF
	
	initToWork : 
		TEST('MoveCylinderToWork');
		moveToWorkTestState := requestCylinderMoveToWork;
		
	requestCylinderMoveToWork :
		fbCylinder.MoveToWork();
		
		moveToWorkTestState := seeMovingToWorkStatus;
		
	seeMovingToWorkStatus :
 
		AssertTrue( fbCylinder.MovingToWorkPosition, 'fbCylinder.MovingToWorkPosition was not true');
		AssertTrue( fbCylinder.toWorkPos, 'fbCylinder.toWorkPos was not true');
		
		IF NOT ( fbCylinder.MovingToHomePosition AND fbCylinder.toHomePos ) THEN
			moveToWorkTestState := completeToWork;
		ELSE
			moveToWorkTestState := waitForCylinderAtWork;
		END_IF
		
	waitForCylinderAtWork :
	
		IF timeoutTimer.Q THEN
			moveToWorkTestState := completeToWork;
			AssertTrue( FALSE , 'fbCylinder timed out moving to work.' );	
	
		ELSIF fbCylinder.AtWork THEN
			AssertTrue( TRUE , '' );
			moveToWorkTestState := completeToWork;
		
		END_IF
		
	completeToWork :
		TEST_FINISHED_NAMED('MoveCylinderToWork');
		MoveCylinderToWork := TRUE;
END_CASE

timeoutTimer( IN := fbCylinder.MovingToWorkPosition );]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>