using System;
using TcoPneumatics;
using Xunit;
using Tc.Prober.Runners;
using Tc.Prober.Recorder;
using System.IO;
using System.Reflection;

namespace xUnitTcOpenTests
{    
    public class fbCylinderTests : IDisposable
    {
        fbCylinder sut;
        
        public fbCylinderTests()
        {
            Entry.TcoPneumaticsPlc.Connector.BuildAndStart();
            sut = Entry.TcoPneumaticsPlc.MAIN._wpfCyclinder;
            Runner.RecordingsShell = null; //@"___YOUR_SOLUTION_DIRECTORY__\tests\xUnitTcOpenTests\recodrings";
            throw new Exception("Assing recording directory to 'Runner.RecordingsShell");
        }

        [Fact]         
        public void MoveCylinderToHomeTest()
        {
            sut.Run(a => a._MoveToHomeTest());
            Assert.False(sut.inAtWorkPos.Synchron);
            Assert.True(sut.inAtHomePos.Synchron);
            Assert.True(sut.outToHomePos.Synchron);
            Assert.False(sut.outToWorkPos.Synchron);
        }

        [Fact] 
        public void MoveCylinderToWorkTest()
        {
            sut.Run(a => a._MoveToWorkTest());
            Assert.True(sut.inAtWorkPos.Synchron);
            Assert.False(sut.inAtHomePos.Synchron);
            Assert.False(sut.outToHomePos.Synchron);
            Assert.True(sut.outToWorkPos.Synchron);
        }

        private RecorderModeEnum mode = RecorderModeEnum.Player;

        [Fact]      
        public void MoveCylinderToWorkTestWithRecording()
        {
            var actor = new Recorder<fbCylinder, PlainfbCylinder>(sut, mode, 1).Actor;
            var done = false;

            sut.Run(() => { done = sut._MoveToWorkTest(); return done; },
                    () => { return done; },
                    null,
                    null,
                    actor,
                    Path.Combine(Runner.RecordingsShell, $"{nameof(MoveCylinderToWorkTestWithRecording)}.json"));

            Assert.True(sut.inAtWorkPos.Synchron);
            Assert.False(sut.inAtHomePos.Synchron);
            Assert.False(sut.outToHomePos.Synchron);
            Assert.True(sut.outToWorkPos.Synchron);
        }

        [Fact]       
        public void MoveCylinderToHomeTestWithRecording()
        {
            var actor = new Recorder<fbCylinder, PlainfbCylinder>(sut, mode, 1).Actor;
            var done = false;

            sut.Run(() => { done = sut._MoveToHomeTest(); return done; },
                    () => { return done; },
                    null,
                    null,
                    actor,
                    Path.Combine(Runner.RecordingsShell, $"{nameof(MoveCylinderToHomeTestWithRecording)}.json"));

            Assert.False(sut.inAtWorkPos.Synchron);
            Assert.True(sut.inAtHomePos.Synchron);
            Assert.True(sut.outToHomePos.Synchron);
            Assert.False(sut.outToWorkPos.Synchron);
        }

        public void Dispose()
        {
            
        }
    }
}
